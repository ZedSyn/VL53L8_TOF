#ifndef _DRV2605L_H_
#define _DRV2605L_H_
#pragma once

#include <stdint.h>

// I2C device address
#define DRV2605_ADDR 0x5A

// Register Map
#define REG_STATUS      0x00
#define REG_MODE        0x01
#define REG_RTPIN       0x02
#define REG_LIBRARY     0x03
#define REG_WAVESEQ1    0x04
#define REG_GO          0x0C
#define REG_OVERDRIVE   0x0D
#define REG_SUSTAINPOS  0x0E
#define REG_SUSTAINNEG  0x0F
#define REG_BREAK       0x10
#define REG_AUDIOCTRL   0x11
#define REG_AUDIOMAX    0x13
#define REG_FEEDBACK    0x1A
#define REG_CONTROL3    0x1D

// Modes
#define MODE_INTTRIG    0x00
#define MODE_REALTIME   0x05

// Libraries
#define LIB_TS2200A     0x01
#define LIB_LRA         0x06

// Function Declarations
/**
 * @brief Initializes the DRV2605L haptic motor driver.
 *
 * This function configures the DRV2605L device for operation by setting up
 * the necessary registers and ensuring the device is ready to generate
 * haptic feedback. It performs the following steps:
 * - Resets the device to ensure it starts in a known state.
 * - Configures the control registers for the desired operating mode.
 * - Verifies communication with the device by reading its status.
 *
 * @return int Returns 0 on successful initialization, or a negative error
 * code if initialization fails (e.g., due to I2C communication issues).
 */
int drv2605_init();
/**
 * @brief Configures the DRV2605L haptic driver to use an Eccentric Rotating Mass (ERM) motor.
 * 
 * This function sets the DRV2605L haptic driver to operate in ERM mode, which is used for
 * driving vibration motors that rely on an eccentric rotating mass to generate vibrations.
 * It ensures the appropriate mode is selected and configures the necessary registers
 * for proper operation with an ERM motor.
 * 
 * @note This function assumes that the I2C communication with the DRV2605L has already
 *       been initialized and that the device is powered on.
 */
void drv2605_use_erm();
/**
 * @brief Configures the DRV2605L haptic driver to use an LRA (Linear Resonant Actuator).
 * 
 * This function sets the DRV2605L device to operate in LRA mode by configuring the appropriate
 * registers. It ensures that the device is optimized for driving an LRA, including setting
 * the feedback mode, waveform library, and other necessary parameters.
 * 
 * @note This function assumes that the I2C communication with the DRV2605L has been initialized
 *       and that the device is properly powered and connected.
 * 
 * @warning Ensure that the connected actuator is an LRA before calling this function, as
 *          incorrect configuration may lead to improper operation or damage to the actuator.
 */
void drv2605_use_lra();
/**
 * @brief Sets the operating mode of the DRV2605L haptic driver.
 *
 * This function configures the DRV2605L device to operate in the specified mode.
 * The mode determines the behavior of the haptic driver, such as standby, 
 * active, or specific waveform playback modes.
 *
 * @param mode The operating mode to set. Valid values are:
 *             - 0x00: Internal trigger mode
 *             - 0x01: External trigger mode (edge)
 *             - 0x02: External trigger mode (level)
 *             - 0x03: PWM input mode
 *             - 0x04: Audio-to-vibe mode
 *             - 0x05: Real-time playback mode
 *             - 0x06: Diagnostics mode
 *             - 0x07: Standby mode
 *
 * @note Ensure that the DRV2605L device is properly initialized before calling this function.
 *       Refer to the datasheet for detailed descriptions of each mode.
 */
void drv2605_set_mode(uint8_t mode);
/**
 * @brief Retrieves the current operating mode of the DRV2605L haptic driver.
 *
 * This function reads the mode register of the DRV2605L device and returns
 * the current operating mode. The mode determines how the haptic driver
 * operates, such as standby, internal trigger, or external trigger modes.
 *
 * @return uint8_t The current operating mode of the DRV2605L.
 *         Possible values:
 *         - 0x00: Standby mode
 *         - 0x01: Internal trigger mode
 *         - 0x02: External trigger mode (edge)
 *         - 0x03: External trigger mode (level)
 *         - 0x04: PWM input mode
 *         - 0x05: Audio-to-vibe mode
 *         - 0x06: Real-time playback mode
 *         - 0x07: Diagnostics mode
 *
 * @note Ensure that the DRV2605L device is properly initialized before
 *       calling this function.
 */
uint8_t drv2605_get_mode();
/**
 * @brief Sets the waveform library to be used by the DRV2605L haptic driver.
 *
 * This function configures the DRV2605L to use a specific waveform library
 * for haptic feedback. The library determines the type of haptic effects
 * that can be generated by the device.
 *
 * @param lib The library identifier to set. Valid values are:
 *            - 0x00: Empty library
 *            - 0x01: TS2200 library
 *            - 0x02: TS2500 library
 *            - 0x03: TS3000 library
 *            - 0x04: TS4000 library
 *            - 0x05: LRA library
 *            - 0x06: Custom waveform library
 *
 * @note Ensure the DRV2605L is properly initialized before calling this function.
 *       Refer to the datasheet for more details on library selection and usage.
 */
void drv2605_set_library(uint8_t lib);
/**
 * @brief Retrieves the current waveform library selection from the DRV2605L device.
 * 
 * This function communicates with the DRV2605L haptic driver to read the 
 * currently selected waveform library. The library determines the type of 
 * haptic effects that can be played by the device.
 * 
 * @return uint8_t The ID of the currently selected waveform library.
 *         Possible values range from 0 to 6, where each ID corresponds to 
 *         a specific library:
 *         - 0: Empty library
 *         - 1: TS2200 library
 *         - 2: TS2500 library
 *         - 3: TS3000 library
 *         - 4: TS4000 library
 *         - 5: TS5000 library
 *         - 6: LRA library
 * 
 * @note Ensure that the DRV2605L device is properly initialized and 
 *       communication is established before calling this function.
 */
uint8_t drv2605_get_library();
/**
 * @brief Sets the waveform effect for a specific slot in the DRV2605L haptic driver.
 *
 * This function configures the DRV2605L haptic driver to play a specific haptic effect
 * in the given slot. The slot determines the sequence order in which the effects are played.
 *
 * @param slot The slot number (0-7) to configure. Each slot corresponds to a position
 *             in the playback sequence.
 * @param effect_id The ID of the haptic effect to assign to the specified slot.
 *                  The effect ID corresponds to predefined waveforms in the DRV2605L library.
 *
 * @note Ensure that the slot number is within the valid range (0-7) and that the effect ID
 *       corresponds to a valid waveform supported by the DRV2605L.
 * @note This function assumes that the DRV2605L device is properly initialized before use.
 */
void drv2605_set_waveform(uint8_t slot, uint8_t effect_id);
/**
 * @brief Plays a haptic feedback effect using the DRV2605L motor driver.
 *
 * This function triggers the DRV2605L motor driver to play a predefined
 * haptic feedback effect. The specific effect to be played should be
 * configured prior to calling this function. It communicates with the
 * DRV2605L over I2C to send the necessary commands to start the effect.
 *
 * @note Ensure that the DRV2605L is properly initialized and configured
 *       before calling this function. The I2C communication must also
 *       be set up correctly.
 */
void drv2605_play();
/**
 * @brief Stops the DRV2605L haptic motor.
 *
 * This function sends the necessary command to the DRV2605L device
 * to stop any ongoing haptic motor activity. It ensures that the motor
 * is brought to a halt safely and resets any active playback state.
 *
 * @note This function assumes that the I2C communication with the DRV2605L
 *       has been properly initialized prior to calling it.
 */
void drv2605_stop();
/**
 * @brief Sets the real-time playback value for the DRV2605L haptic motor driver.
 *
 * This function allows direct control of the haptic motor by setting a real-time
 * playback value. The value determines the strength and intensity of the haptic
 * feedback. This is typically used for fine-tuned control of the motor in real-time
 * applications.
 *
 * @param val The real-time playback value to set. This is an 8-bit signed integer
 *            where the range is typically -128 to 127. Positive values increase
 *            the motor intensity, while negative values may have no effect depending
 *            on the motor configuration.
 *
 * @note Ensure that the DRV2605L is configured in real-time playback mode before
 *       calling this function. Failure to do so may result in undefined behavior.
 */
void drv2605_set_realtime_value(int8_t val);

#endif